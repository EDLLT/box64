/******************************************************************
 * File automatically generated by rebuild_wrappers_32.py (v0.0.1.1) *
 ******************************************************************/
#ifndef __WRAPPER32_H_
#define __WRAPPER32_H_
#include <stdint.h>
#include <string.h>

typedef struct x64emu_s x64emu_t;

// the generic wrapper pointer functions
typedef void (*wrapper_t)(x64emu_t* emu, uintptr_t fnc);

// list of defined wrappers
// E = current x64emu struct
// v = void
// C = unsigned byte c = char
// W = unsigned short w = short
// u = uint32, i = int32
// U = uint64, I = int64
// L = unsigned long, l = signed long (long is an int with the size of a pointer)
// p = pointer
// h = hash (32<->64bits)
// H = hash (32<->64bits) that will be deleted from hashmaps
// a = locale
// A = locale that will be deleted from hashmaps
// f = float, d = double, D = long double, K = fake long double
// V = vaargs, s = address on the stack (doesn't move forward the pointer)
// O = libc O_ flags bitfield
// o = stdout
// S = _IO_2_1_stdXXX_ pointer (or FILE*)
// 2 = struct of 2 uint
// N = ... automatically sending 1 arg
// M = ... automatically sending 2 args
// P = Vulkan struct pointer
// s..._ = pointer to read-only structure
// B..._ = pointer to write-only structure
// b..._ = pointer to read-write structure

void iFv_32(x64emu_t *emu, uintptr_t fnc);
void iFi_32(x64emu_t *emu, uintptr_t fnc);
void iFf_32(x64emu_t *emu, uintptr_t fnc);
void iFd_32(x64emu_t *emu, uintptr_t fnc);
void iFp_32(x64emu_t *emu, uintptr_t fnc);
void IFf_32(x64emu_t *emu, uintptr_t fnc);
void IFd_32(x64emu_t *emu, uintptr_t fnc);
void UFs_32(x64emu_t *emu, uintptr_t fnc);
void fFf_32(x64emu_t *emu, uintptr_t fnc);
void dFd_32(x64emu_t *emu, uintptr_t fnc);
void iFpi_32(x64emu_t *emu, uintptr_t fnc);
void UFss_32(x64emu_t *emu, uintptr_t fnc);
void fFif_32(x64emu_t *emu, uintptr_t fnc);
void fFfi_32(x64emu_t *emu, uintptr_t fnc);
void fFff_32(x64emu_t *emu, uintptr_t fnc);
void fFfD_32(x64emu_t *emu, uintptr_t fnc);
void fFfp_32(x64emu_t *emu, uintptr_t fnc);
void dFid_32(x64emu_t *emu, uintptr_t fnc);
void dFdi_32(x64emu_t *emu, uintptr_t fnc);
void dFdd_32(x64emu_t *emu, uintptr_t fnc);
void dFdD_32(x64emu_t *emu, uintptr_t fnc);
void dFdp_32(x64emu_t *emu, uintptr_t fnc);
void pFEv_32(x64emu_t *emu, uintptr_t fnc);
void pFEp_32(x64emu_t *emu, uintptr_t fnc);
void vFfpp_32(x64emu_t *emu, uintptr_t fnc);
void vFdpp_32(x64emu_t *emu, uintptr_t fnc);
void fFfff_32(x64emu_t *emu, uintptr_t fnc);
void fFffp_32(x64emu_t *emu, uintptr_t fnc);
void dFddd_32(x64emu_t *emu, uintptr_t fnc);
void dFddp_32(x64emu_t *emu, uintptr_t fnc);

#if defined(HAVE_LD80BITS)
void DFD_32(x64emu_t *emu, uintptr_t fnc);
void DFDD_32(x64emu_t *emu, uintptr_t fnc);
void DFDp_32(x64emu_t *emu, uintptr_t fnc);
#endif

#if !defined(HAVE_LD80BITS)
void KFK_32(x64emu_t *emu, uintptr_t fnc);
void KFKK_32(x64emu_t *emu, uintptr_t fnc);
void KFKp_32(x64emu_t *emu, uintptr_t fnc);
#endif

void UFsvvs_32(x64emu_t *emu, uintptr_t fnc);
#endif // __WRAPPER32_H_
